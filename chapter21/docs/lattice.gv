digraph Lattice {
    compound = true;
    // Define nodes
    splines=false;
    node [shape=circle, style=filled];
    nodesep=0.2;
    ranksep=0.2;

    TOP [label=<<B>⊤</B >>, fillcolor=black, fontcolor=white];
    BOT [label=<<B>⊥</B>>, fillcolor=black, fontcolor=white];

    // ----------------------
    // Control
    XCTRL [label=<<B>⊤</B >:ctrl>, fillcolor=yellow, shape=oval];
    CTRL  [label=<<B>⊥</B>:ctrl>, fillcolor=yellow, shape=oval];

    TOP   -> XCTRL;
    XCTRL -> CTRL;
    CTRL  -> BOT;

    // ----------------------
    // Integers
    INT_TOP [label=<<B>⊤</B >:int>, fillcolor=lightblue, shape=oval];
    INT_BOT [label=<<B>⊥</B>:int>, fillcolor=lightblue, shape=oval];

    INT_HI    [label="[min>max]" , fillcolor=lightblue, shape=oval];
    INT_XBOOL [label="[1...0]", fillcolor=lightblue, shape=oval];
    INT_CON   [label="constants", fillcolor=lightblue, shape=oval];
    INT_CON0  [label="0", fillcolor=lightblue];
    INT_CON1  [label="1", fillcolor=lightblue];
    INT_BOOL  [label="[0...1]", fillcolor=lightblue,shape=oval];
    INT_LO    [label="[min<max]" , fillcolor=lightblue, shape=oval];

    TOP        -> INT_TOP;
    INT_TOP    -> INT_HI;
    INT_HI     -> INT_XBOOL;
    INT_XBOOL  -> INT_CON0;
    INT_XBOOL  -> INT_CON1;
    INT_HI     -> INT_CON;
    INT_CON0   -> INT_BOOL;
    INT_CON1   -> INT_BOOL;
    INT_BOOL   -> INT_LO;
    INT_CON    -> INT_LO;
    INT_LO     -> INT_BOT;
    INT_BOT    -> BOT;

    INT_CON0 -> INT_CON1 -> INT_CON [style=invis];

    // ----------------------
    // Floats
    FLT_TOP [label=<<B>⊤</B >:flt>, fillcolor=aqua, shape=oval];
    FLT_BOT [label=<<B>⊥</B>:flt>, fillcolor=aqua, shape=oval];

    FLT_CON64  [label="64b consts\n[excludes\n32b consts]" , fillcolor=aqua, shape=oval];
    FLT_CON32  [label="32b consts", fillcolor=aqua, shape=oval];
    FLT_CONPI  [label="3.14159...", fillcolor=aqua, shape=oval];
    FLT_X32    [label="~f32", fillcolor=aqua];
    FLT_CON0   [label="0."  , fillcolor=aqua];
    FLT_32     [label="f32" , fillcolor=aqua];

    TOP       -> FLT_TOP;
    FLT_TOP   -> FLT_CON64
    FLT_TOP   -> FLT_CONPI
    FLT_CON64 -> FLT_BOT
    FLT_CONPI -> FLT_BOT
    
    FLT_TOP   -> FLT_X32;
    FLT_X32   -> FLT_CON0;
    FLT_X32   -> FLT_CON32;
    FLT_CON0  -> FLT_32;
    FLT_CON32 -> FLT_32;
    FLT_32    -> FLT_BOT
    
    FLT_BOT   -> BOT;

    FLT_CON0 -> FLT_CON32 -> FLT_CONPI -> FLT_CON64 [style=invis];


    // ----------------------
    // Pointers, just a boolean nil/not and a struct
    PTR  [shape=none, fillcolor=none, label=<
      <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
        <TR><TD BGCOLOR="green"><FONT color="white">*ptr</FONT></TD></TR>
        <TR><TD BGCOLOR="lightgreen">struct</TD></TR>
      </TABLE>
    >];
    PTR0  [shape=none, fillcolor=none, label=<
      <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
        <TR><TD BGCOLOR="green"><FONT color="white">*ptr?</FONT></TD></TR>
        <TR><TD BGCOLOR="lightgreen">struct</TD></TR>
      </TABLE>
    >];
    
    TOP  -> PTR;
    PTR  -> PTR0;
    PTR0 -> BOT;

    // ----------------------
    // Structs
    STRUCT_TOP    [label=<<B>⊤</B >:struct>, fillcolor=lightgreen, shape=oval];
    STRUCT_BOT    [label=<<B>⊥</B>:struct>, fillcolor=lightgreen, shape=oval];

    STRUCT_S1  [shape=none, fillcolor=none, label=<
      <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
        <TR><TD BGCOLOR="lightgreen">field</TD><TD BGCOLOR="lightblue:green" gradientangle="315">int/ptr</TD></TR>
      </TABLE>
    >];
    STRUCT_S2  [shape=none, fillcolor=none, label=<
      <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
        <TR><TD BGCOLOR="lightgreen">field</TD><TD BGCOLOR="lightblue:green" gradientangle="315">int/ptr</TD></TR>
        <TR><TD BGCOLOR="lightgreen">field</TD><TD BGCOLOR="lightblue:green" gradientangle="315">int/ptr</TD></TR>
      </TABLE>
    >];
    STRUCT_SN  [shape=none, fillcolor=none, label=<
      <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
        <TR><TD BGCOLOR="lightgreen">field</TD><TD BGCOLOR="lightblue:green" gradientangle="315">int/ptr</TD></TR>
        <TR><TD BGCOLOR="lightgreen">...  </TD><TD BGCOLOR="lightblue:green" gradientangle="315">int/ptr</TD></TR>
        <TR><TD BGCOLOR="lightgreen">field</TD><TD BGCOLOR="lightblue:green" gradientangle="315">int/ptr</TD></TR>
      </TABLE>
    >];


    TOP          -> STRUCT_TOP;
    STRUCT_TOP   -> STRUCT_S1;
    STRUCT_TOP   -> STRUCT_S2;
    STRUCT_TOP   -> STRUCT_SN;
    STRUCT_S1    -> STRUCT_BOT;
    STRUCT_S2    -> STRUCT_BOT;
    STRUCT_SN    -> STRUCT_BOT;
    STRUCT_BOT   -> BOT;

    STRUCT_S1 -> STRUCT_S2 -> STRUCT_SN [style=invis];

    // ----------------------
    // Memory
    MEM_TOP       [label=<<B>⊤</B >:mem>, fillcolor=blue, fontcolor=white, shape=oval];
    MEM_BOT       [label=<<B>⊥</B>:mem>, fillcolor=blue, fontcolor=white, shape=oval];
    MEM_ALIAS1    [label="#1"     , fillcolor=blue, fontcolor=white];
    MEM_ALIASDOTS [label="..."    , fillcolor=blue, fontcolor=white, shape=oval];
    MEM_ALIASN    [label="#n"     , fillcolor=blue, fontcolor=white];

    TOP          -> MEM_TOP;
    MEM_TOP      -> MEM_ALIAS1;
    MEM_TOP      -> MEM_ALIASDOTS;
    MEM_TOP      -> MEM_ALIASN;
    MEM_ALIAS1   -> MEM_BOT;
    MEM_ALIASDOTS -> MEM_BOT;
    MEM_ALIASN    -> MEM_BOT;
    MEM_BOT       -> BOT;

    MEM_ALIAS1 -> MEM_ALIASDOTS -> MEM_ALIASN [style=invis];

    // ----------------------
    // Tuples

    TUPLE_TOP [label=<<B>⊤</B >:tuple>, fillcolor=pink, shape=oval];
    TUPLE_BOT [label=<<B>⊥</B>:tuple>, fillcolor=pink, shape=oval];

    TUPLE1 [shape=none, fillcolor=none, label=<
      <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
        <TH><TD BGCOLOR="pink">Tuple</TD></TH>
        <TR><TD BGCOLOR="black" ><FONT color="white">type</FONT></TD></TR>
      </TABLE>
    >];
    TUPLE2 [shape=none, fillcolor=none, label=<
      <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
        <TH><TD BGCOLOR="pink">Tuple</TD></TH>
        <TR><TD BGCOLOR="black" ><FONT color="white">type</FONT></TD></TR>
        <TR><TD BGCOLOR="black" ><FONT color="white">type</FONT></TD></TR>
      </TABLE>
    >];
    TUPLEN [shape=none, fillcolor=none, label=<
      <TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
        <TH><TD BGCOLOR="pink">Tuple</TD></TH>
        <TR><TD BGCOLOR="black" ><FONT color="white">type</FONT></TD></TR>
        <TR><TD BGCOLOR="black" ><FONT color="white">...</FONT></TD></TR>
        <TR><TD BGCOLOR="black" ><FONT color="white">type</FONT></TD></TR>
      </TABLE>
    >];


    TOP -> TUPLE_TOP;
    TUPLE_TOP -> TUPLE1;
    TUPLE_TOP -> TUPLE2;
    TUPLE_TOP -> TUPLEN;
    TUPLE1 -> TUPLE_BOT;
    TUPLE2 -> TUPLE_BOT;
    TUPLEN -> TUPLE_BOT;
    TUPLE_BOT -> BOT;

    // ----------------------
    // Additional customization
    {rank=same; TOP;}
    {rank=same; INT_TOP; FLT_TOP; XCTRL; PTR; STRUCT_TOP; MEM_TOP; TUPLE_TOP}
    {rank=same; INT_CON; INT_CON0; INT_CON1;
                FLT_CON32; FLT_CON64;  FLT_CON0; FLT_CONPI;
                STRUCT_S1; STRUCT_S2; STRUCT_SN;
                MEM_ALIAS1;  MEM_ALIASDOTS; MEM_ALIASN;
                TUPLE1; TUPLE2; TUPLEN;
    }
    {rank=same; INT_BOT; FLT_BOT; CTRL; PTR0; STRUCT_BOT; MEM_BOT; TUPLE_BOT}
    {rank=same; BOT;}
}
