// -*- mode: java;  -*-
// based on the top-down version from https://en.wikipedia.org/wiki/Merge_sort

val merge_sort = { int[] a, int[] b, int n ->
    copy_array (a, 0, n, b);
    split_merge(a, 0, n, b);
};

val split_merge = { int[] b, int begin, int end, int[] a ->
    if (end - begin <= 1)
        return 0;
    int middle = (end + begin) / 2;
    split_merge(a, begin, middle, b);
    split_merge(a, middle, end, b);
    merge(b, begin, middle, end, a);
    return 0;
};

val merge = { int[] b, int begin, int middle, int end, int[] a ->
    int i = begin, j = middle;

    for (int k = begin; k < end; k++) {
        // && and ||
        bool cond = false;
        if (i < middle) {
            if (j >= end)          cond = true;
            else if (a[i] <= a[j]) cond = true;
        }
        if (cond) b[k] = a[i++];
        else      b[k] = a[j++];
    }
};

val copy_array = { int[] a, int begin, int end, int[] b ->
    for (int k = begin; k < end; k++)
        b[k] = a[k];
};

val eq = { int[] a, int[] b, int n ->
    int result = 1;
    int i = 0;
    while (i < n) {
        if (a[i] != b[i]) {
            result = 0;
            break;
        }
        i = i + 1;
    }
    return result;
};

val main = { ->
    int[] !a = new int[10];
    a[0] = 10; a[1] = 9; a[2] = 8; a[3] = 7; a[4] = 6;
    a[5] = 5; a[6] = 4; a[7] = 3; a[8] = 2; a[9] = 1;
    int[] !b = new int[10];
    b[0] = 0; b[1] = 0; b[2] = 0; b[3] = 0; b[4] = 0;
    b[5] = 0; b[6] = 0; b[7] = 0; b[8] = 0; b[9] = 0;
    int[] !expect = new int[10];
    expect[0] = 1; expect[1] = 2; expect[2] = 3; expect[3] = 4; expect[4] = 5;
    expect[5] = 6; expect[6] = 7; expect[7] = 8; expect[8] = 9; expect[9] = 10;
    merge_sort(a, b, 10);
    return eq(a,expect,10);
};
