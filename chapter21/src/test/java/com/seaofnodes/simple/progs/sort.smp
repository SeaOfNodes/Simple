// -*- mode: java;  -*-
// based on the top-down version from https://en.wikipedia.org/wiki/Merge_sort

val merge_sort = { int[] a ->
    int[] !b = new int[a#];
    copy_array (a, 0, a#, b);
    split_merge(a, 0, a#, b);
};

val split_merge = { int[] b, int begin, int end, int[] a ->
    if (end - begin <= 1)
        return 0;
    int middle = (end + begin) / 2;
    split_merge(a, begin, middle, b);
    split_merge(a, middle, end, b);
    merge(b, begin, middle, end, a);
    return 0;
};

val merge = { int[] b, int begin, int middle, int end, int[] a ->
    int i = begin, j = middle;

    for (int k = begin; k < end; k++) {
        // && and ||
        bool cond = false;
        if (i < middle) {
            if (j >= end)          cond = true;
            else if (a[i] <= a[j]) cond = true;
        }
        if (cond) b[k] = a[i++];
        else      b[k] = a[j++];
    }
};

val copy_array = { int[] a, int begin, int end, int[] b ->
    for (int k = begin; k < end; k++)
        b[k] = a[k];
};
